from enum import Enum
from pathlib import Path
from types import SimpleNamespace
from typing import Optional

import typer
from rich.prompt import Prompt
from typing_extensions import Annotated

from scripts.format_novel import execute as novel_formatter
from scripts.metadata.sources import (AvailableSources, MetadataSource,
                                      get_source)
from scripts.send_request import bulk_chapters_request, novel_request

app = typer.Typer(help="Collection of scripts that clean, extract, make requests and format a novel.")

AVAILABLE_REQUEST_TYPES = ["novel", "chapters"]

class RequestType(str, Enum):
    novel = "novel"
    chapters = "chapters"

OPTIONS_HELP_TEXT = {
    "root" : "Root folder generated by the lightnovel-crawler script",
    "source": "Source from which the metadata will be extracted",
    "novel_uri" : "Uri for the novel from the selected source website",
    "with_image": "Specify whether the order will send an image along with the novel",
    "novel_path": "Path containg the novel json file that will be sent to the Stalkers API",
    "req_type": "Type of request"
}

@app.command('metadata', help="This script extracts some required metadatas of a given novel.")
def get_metadata(
    ctx: typer.Context,
    source: Annotated[AvailableSources, typer.Option('--source','-s', help=OPTIONS_HELP_TEXT["source"], prompt=True)] = None,
    novel_uri: Annotated[str, typer.Option('--novel-uri', '-u',help=OPTIONS_HELP_TEXT["novel_uri"], prompt="Novel URI")] = None
):
    metadata_source = get_source(source)(ctx.obj.root, novel_uri)
    metadata_source.execute()


@app.command('format', help="This script extracts all the chapters and metadatas of a given root folder (folder generated by the lightnovel-crawler script) into a single json that follows the Stalkers API standards.")
def format_novel(ctx: typer.Context):
    novel_formatter(ctx.obj.root)


@app.command('all', help="Run all metadata/format scripts together.")
def all_format(
    ctx: typer.Context,
    source: Annotated[AvailableSources, typer.Option('--source','-s', help=OPTIONS_HELP_TEXT["source"], prompt=True, case_sensitive=False)] = None,
    novel_uri: Annotated[str, typer.Option('--novel-uri', '-u',help=OPTIONS_HELP_TEXT["novel_uri"], prompt="Novel URI")] = None
):
    metadata_source = get_source(source)(ctx.obj.root, novel_uri)
    metadata_source.execute()
    novel_formatter(ctx.obj.root)


@app.command('req', help="Send a Novel request to the Stalkers API")
def request_stalkers_api(
    ctx: typer.Context,
    type: Annotated[RequestType, typer.Option('--req-type','-t', help=OPTIONS_HELP_TEXT["req_type"], prompt=True, case_sensitive=False)] = None,
):
    match type:
        case RequestType.novel:
            with_image = typer.confirm("With Image?", default=True)
            novel_request(root_path=ctx.obj.root, with_image=with_image)
        case RequestType.chapters:
            novel_slug = Prompt.ask("Novel Slug")
            bulk_chapters_request(root_path=ctx.obj.root, novel_slug=novel_slug)


@app.callback()
def main(
    ctx: typer.Context,
    root: Annotated[str, typer.Option('--root','-r', help=OPTIONS_HELP_TEXT["root"], prompt="Root Folder")] = None,
):
    if not root:
        print(
            "Missing root folder. Pass --root / -r"
        )
        raise typer.Exit(1)
    ctx.obj = SimpleNamespace(root = root)


if __name__ == "__main__":
    app()